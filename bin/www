#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').express;
var debug = require('debug')('misproject:server');
var http = require('http');
var io = require('socket.io');
var sessionMiddleware = require('../app').sessionMiddleware;
var TaskModel = require('../models/task');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);


/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


io.listen(server);
var serv_io = io.listen(server);


function counting_req(member) {

    var c = 0;

    var query = {
        $or: [{pmID: member.member._id, status: "request"}]
    };

    TaskModel.count(query, function (err, count) {

        c = count;
    });
    return c;
}

function counting_pro(member) {

    var c = 0;

    var query = {
        $or: [{rmID: member.member._id, status: "progressing", rCheck: false}]
    };

    TaskModel.count(query, function (err, count) {

        c = count;
    });
    return c;
}

function counting_rch(member) {

    var c = 0;

    var query = {
        $or: [{pmID: member.member._id, status: "progressing", rCheck: true, pCheck: false}]
    };

    TaskModel.count(query, function (err, count) {

        c = count;
    });
    return c;
}

function counting_pch(member) {

    var c = 0;

    var query = {
        $or: [{rmID: member.member._id, status: "progressing", pCheck: true}]
    };

    TaskModel.count(query, function (err, count) {

        c = count;
    });
    return c;
}


serv_io.use(function (socket, next) {
    sessionMiddleware(socket.request, socket.request.res, next);
});


serv_io.sockets.on('connection', function (socket) {

    if (socket.request.session.member) {
        setInterval(function () {
            socket.emit('count', {
                'count_req': counting_req(socket.request.session),
                'count_pro': counting_pro(socket.request.session),
                'count_rch': counting_rch(socket.request.session),
                'count_pch': counting_pch(socket.request.session)
            });
        }, 10000);

    }

});


